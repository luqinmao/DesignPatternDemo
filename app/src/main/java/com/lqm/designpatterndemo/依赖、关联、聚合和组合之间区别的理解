
依赖(Dependency)
    关系是类与类之间的联接。依赖关系表示一个类依赖于另一个类的定义。
    例如，一个人(Person)可以买车(car)和房子(House)，Person类依赖于Car类和House类的定义，
    因为Person类引用了Car和House。与关联不同的是，Person类里并没有Car和House类型的属性，
    Car和House的实例是以参量的方式传入到buy()方法中去的。一般而言，依赖关系在Java语言中体现为局域变量、
    方法的形参，或者对静态方法的调用。

关联(Association）
    关系是类与类之间的联接，它使一个类知道另一个类的属性和方法。关联可以是双向的，
    也可以是单向的。在Java语言中，关联关系一般使用成员变量来实现。

 聚合(Aggregation)
     关系是关联关系的一种，是强的关联关系。聚合是整体和个体之间的关系。
     例如，汽车类与引擎类、轮胎类，以及其它的零件类之间的关系便整体和个体的关系。与关联关系一样，
     聚合关系也是通过实例变量实现的。但是关联关系所涉及的两个类是处在同一层次上的，而在聚合关系中，
     两个类是处在不平等层次上的，一个代表整体，另一个代表部分。

 组合(Composition)
     关系是关联关系的一种，是比聚合关系强的关系。它要求普通的聚合关系中代表整体的对象
     负责代表部分对象的生命周期，组合关系是不能共享的。代表整体的对象需要负责保持部分对象和存活，
     在一些情况下将负责代表部分的对象湮灭掉。代表整体的对象可以将代表部分的对象传递给另一个对象，
     由后者负责此对象的生命周期。换言之，代表部分的对象在每一个时刻只能与一个对象发生组合关系，
     由后者排他地负责生命周期。部分和整体的生命周期一样。

                                                                    ——摘自《Java面向对象编程》

--以上关系的耦合度依次增强

--在java以及其他的面向对象设计模式中，类与类之间主要有6种关系，
  他们分别是：依赖、关联、聚合、组合、继承、实现。他们的耦合度依次增强。





















